http://noobtuts.com/unity/2d-pacman-game
~~~~~~~~~~~~~~~~~~~~~~~~~~~ 01/23/2015 ~~~~~~~~~~~~~~~~~~~~
Create untity project "PacMan" with project settings at 2D
Main camera:
	Background color black
	Size 30
	Position (14.5, 16, -10)
Download maze background
	save to /PacMan/Assets/Sprites/maze.png
	Change pixels per unit in image inspector to 8
	Drag image to scene and zero out position coords
Saved scene as /PacMan/Assets/Scenes/maze.unity
Adding physics to maze:
	Inspector->Add Component->Physics 2D->Box Collider 2D
	Instead of using an algorithm, just edit the box manually
Pacman:
	Pull down sprite sheet and save to /PacMan/Assets/Sprites/pacman.png
	Adjust Px/Unit to 8
	Set "Sprite Mode" to multiple
	Open sprite editor from inspector to tell unity that it is a sprite SHEET
	Slice -> Grid -> 16x15 -> Slice
	Animation:
		Right	Slice(0, 1, 2)
		Left	Slice(3, 4, 5)
		Up		Slice(6, 7, 8)
		Down 	Slice(9, 10, 11)
		Select # of sprites from assets
		Drag into scene
		Save animation under /PacMac/Assets/Sprites/animation/something.anim
		Delete any extra game objects that were created (we only need the first)
		Controlling animation:
			Double click pacman animation controller
			Drag in other animation files to the Animator editor
			Create two FLOAT Parameters: DirX & DirY
~~~~~~~~~~~~~~~~~~~~~~~~~~~ 01/27/2015 ~~~~~~~~~~~~~~~~~~~~
			NOTE: Any State block stands for ANY OTHER state than the one transitioning to
			Right click 'Any State' and make transition to 'right' state
			Look at Inspector for transition and scroll down to the Conditions area
			Make condition so that DirX > 0.1 (because accuracy)
			Replicate for each 'left', 'down', 'up'
				Any State to right with the Condition DirX > 0.1
				Any State to left with the Condition DirX < -0.1
				Any State to up with the Condition DirY > 0.1
				Any State to down with the Condition DirY < -0.1
			Select all states (not AnyState) and set speed to .8
Cleaning up some settings:
	Set maze to X: 15.5 Y: 15
	Set pacman to X: 15 Y: 13
PM Physics:
	[Select pacman]
	Add Component->Physics 2D->Circle Collider 2D
		radius: 0.95
	Add Component->Physics 2D->Rigidbody 2D
		Fixed angle true
		gravity scale: 0
	Note: By adding the rigid body, the 'OnCollisionEnter2D' will be called when object collide
Movement:
	Create script in CSharp called PacmanMove associated to the pacman object
	Added FixedUpdate method, which is called at a fixed time interval, independent of FPS
	create speed float variable, assigned to .4
	Create a function which casts a line from the pacman in any direction to check if there is a wall
		- function taken from tutorial
~~~~~~~~~~~~~~~~~~~~~~~~~~~ After Class ~~~~~~~~~~~~~~~~~~~
	Adds code in tutorial to set the parameters in the animation
Set pacman's sprite order in layer to '1' so that pacman is always rendered on top (for dots)
Pacdots:
	Import packdot with ppu = 8
	drag pacdot to scene
	add 2d box collider to dot and set as a trigger
	add new Pacdot CSharp script to the pacdot
	add OnTriggerEnter2D function
	add code for destroying the dots
Self code:
	create script for maze
	create variable for an array of x,y dot positions
	on start, generate pacdots
~~~~~~~~~~~~~~~~~~~~~~~~~~~ 01/28/2015 ~~~~~~~~~~~~~
Self code:
	Finished pacdot coordinate array(s)
	Worked on colliders and found a better way to detect collisions for better movement
~~~~~~~~~~~~~~~~~~~~~~~~~~~ 01/30/2015 ~~~~~~~~~~~~~
Ghosts:
	[Blinky (Red Ghost)]
	Download red ghost texture
	Import settings PpU @ 8
	Sprite mode multiple
	Sprite Editor -> Slice -> Type: Grid -> 16x16 -> Slice
	Drag sprites into scene:
		0 & 1 -> right.anim
		2 & 3 -> left.anim
		4 & 5 -> up.anim
		6 & 7 -> down.anim
	Remove all but 1 controller objects (scenen and animation folder)
	Rename object to Blinky
	Place @ 0, 1, 0
	Open 'blinky' in the animation folder (opens animator in Unity)
	Duplicate setup from pacman
	Add Circle Collider 2D to Blinky w/ isTrigger true & radius @ .8
	Add RigidBody2D to Blinky w/ gravity 0 & fixed angle
	Put Blinky's Order in layer to 1, because it will also render on top of dots
	Add new CSharp Ghost script to Blinky
Ghost Script:
	add FixedUpdate method
	create Transform Array named waypoints
	create int for current waypoint index
	create float speed var @ .3
	
